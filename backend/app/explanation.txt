Step 1: User Makes a Request
    Request Format:

        The user sends a GET request to the FastAPI application with the specified model and year:

        http://localhost:8000/predict/{model}/{year}

    FastAPI Receives the Request:

        This triggers the predict() function in main.py.
        The model and year are extracted from the URL to determine which forecasting function to use.

Step 2: FastAPI Calls the predict() Function
    Path Variables:
        The year is extracted from the URL (e.g., 2025).
        The model is extracted to call the appropriate forecasting method (AR, MA, ARMA, SARIMAX).

    Construct File Path:
        The .xls file corresponding to the selected year is loaded:

        data/conso_mix_RTE_{year}.xls

    Call Forecasting Function:
        The function forecast_{model}() is called based on the specified model.

    Return JSON Response:
        The predictions are returned in a structured JSON format.

Step 3: forecast_{model}() Function in model.py
    Data Processing:

        Parse Energy Data:
            Calls parse_energy_data(xls_file), which loads and processes the dataset.
            Returns a DataFrame with the columns: DateTime, PrévisionJ-1, PrévisionJ, and Consommation.

        Extract Time Series:
            time_series = df['Consommation'].dropna() extracts and cleans the energy consumption series.

    Model Training & Forecasting:

        Each forecasting function applies a different model:

            AR Model: Uses only autoregressive terms. (1,0,0)
            MA Model: Uses only moving average terms. (0,0,1)
            ARMA Model: Combines AR and MA components. (1,0,1)
            SARIMAX Model: Includes seasonality for improved accuracy.

        The selected model is trained, and future predictions are generated using:

        predictions = model_fit.forecast(steps=steps)

    Formatting the Forecast:

        The forecast is formatted as a JSON response with:
            DateTime: Future timestamps.
            Forecast: Predicted energy consumption in kWh.

Step 4: FastAPI Sends the Response
    JSON Response Example:

    {
        "forecast": [
            {"DateTime": "2025-01-01 00:15:00", "Forecast": "64038.74 kWh"},
            {"DateTime": "2025-01-01 00:30:00", "Forecast": "64101.63 kWh"},
            {"DateTime": "2025-01-01 00:45:00", "Forecast": "63849.16 kWh"},
            {"DateTime": "2025-01-01 01:00:00", "Forecast": "63921.27 kWh"}
        ]
    }

Running the FastAPI Server
    Command:

    Run the following command from the backend/ directory (not app/):

    uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

    Access the API:

    Once running, you can access predictions for a specific year and model:

    http://127.0.0.1:8000/predict/AR/2025
    http://127.0.0.1:8000/predict/MA/2024
    http://127.0.0.1:8000/predict/ARMA/2023
    http://127.0.0.1:8000/predict/SARIMAX/2023